(dat[,2] -mean(dat[,2],na.rm = TRUE))))
nij
sum((dat[,1] - mean(dat[,1],na.rm = TRUE)) *
(dat[,2] -mean(dat[,2],na.rm = TRUE)),na.rm = TRUE)/
nij
cov(dat,use = "pairwise.complete.obs")
sum((dat[,1] - mean(dat[,1],na.rm = TRUE)) *
(dat[,2] -mean(dat[,2],na.rm = TRUE)),na.rm = TRUE)/(nij-1)
dat[,1:2]
?cov
which(dat[,1]!=0 && dat[,2]!=0)
which(dat[,1]!=0 & dat[,2]!=0)
index = which(dat[,1]!=0 & dat[,2]!=0)
sum((dat[index,1] - mean(dat[index,1])) *
(dat[index,2] - mean(dat[index,2])))/(length(index) - 1)
cov(dat,use = "pairwise.complete.obs")
index = which(dat[,1]!=0 & dat[,3]!=0)
sum((dat[index,1] - mean(dat[index,1])) *
(dat[index,3] - mean(dat[index,3])))/(length(index) - 1)
length(index)
index = which(dat[,1]!=0 & dat[,2]!=0)
sum((dat[index,1] - mean(dat[index,1])) *
(dat[index,2] - mean(dat[index,2])))/(length(index) - 1)
nij <- sum(!is.na((dat[,1] - mean(dat[,1],na.rm = TRUE)) *
(dat[,2] -mean(dat[,2],na.rm = TRUE))))
nij
index = which(dat[,1]!=0 & dat[,2]!=0)
length(index)
index = which(dat[,1]!=0 & dat[,2]!=0)
sum((dat[index,1] - mean(dat[index,1])) *
(dat[index,2] - mean(dat[index,2])))/(length(index) - 1)
sum((dat[,1] - mean(dat[,1],na.rm = TRUE)) *
(dat[,2] -mean(dat[,2],na.rm = TRUE)),na.rm = TRUE)/(nij-1)
ni <- sum(!is.na(dat[,1]))
nj <- sum(!is.na(dat[,2]))
nij <- sum(!is.na(dat[,1] * dat[,2]))
sum((dat[,1] - sum(dat[,1],na.rm = TRUE)/ni) *
(dat[,2] -sum(dat[,2],na.rm = TRUE)/nj),na.rm = TRUE)/(nij-1)
sum(dat[,1],na.rm = TRUE)/ni
mean(dat[index,1])
sum(dat[,1],na.rm = TRUE)/(ni-1)
i
j
ni <- sum(!is.na(dat[,i]))
nj <- sum(!is.na(dat[,j]))
nij <- sum(!is.na(dat[,i] * dat[,j]))
nij
nij <- sum(!is.na((dat[,1] - mean(dat[,1],na.rm = TRUE)) *
(dat[,2] -mean(dat[,2],na.rm = TRUE))))
nij
sum((dat[,1] - sum(dat[,1],na.rm = TRUE)/ni) *
(dat[,2] -sum(dat[,2],na.rm = TRUE)/nj),na.rm = TRUE)/(nij-1)
sum((dat[,i] - sum(dat[,i],na.rm = TRUE)/ni) *
(dat[,j] -sum(dat[,j],na.rm = TRUE)/nj),na.rm = TRUE)/(nij-1)
i = 2
j = 1
ni <- sum(!is.na(dat[,i]))
nj <- sum(!is.na(dat[,j]))
nij <- sum(!is.na(dat[,i] * dat[,j]))
sum((dat[,i] - sum(dat[,i],na.rm = TRUE)/ni) *
(dat[,j] -sum(dat[,j],na.rm = TRUE)/nj),na.rm = TRUE)/(nij-1)
sum(dat[,i]*dat[,j],na.rm = T)/(nij-1) -
(sum(dat[,i],na.rm = T)/(ni)) *
(sum(dat[,j],na.rm = T)/(nj))
sum(dat[,i]*dat[,j],na.rm = T)/nij -
(sum(dat[,i],na.rm = T)/(ni)) *
(sum(dat[,j],na.rm = T)/(nj))
i
j
ni <- sum(!is.na(dat[,i]))
nj <- sum(!is.na(dat[,j]))
nij <- sum(!is.na(dat[,i] * dat[,j]))
(sum(dat[,i],na.rm = T)/(ni))
sum(dat[,i],na.rm = TRUE)/ni
sum(dat[,j],na.rm = TRUE)/nj
(sum(dat[,j],na.rm = T)/(nj))
sum(dat[,i]*dat[,j],na.rm = T)/nij -
(sum(dat[,i],na.rm = T)/(ni)) *
(sum(dat[,j],na.rm = T)/(nj))
dimen <- dim(dat)
m <- dimen[1]
n <- dimen[2]
covar <- matrix(0,nrow = n,ncol = n)
for(i in 1:n)
{
for(j in i:n)
{
ni <- sum(!is.na(dat[,i]))
nj <- sum(!is.na(dat[,j]))
nij <- sum(!is.na(dat[,i] * dat[,j]))
#covar[i,j] <- sum(dat[,i]*dat[,j],na.rm = T)/nij -
#              (sum(dat[,i],na.rm = T)/(ni)) *
#              (sum(dat[,j],na.rm = T)/(nj))
#this is the available case
covar[j,i] <- covar[i,j] <- sum((dat[,i] - sum(dat[,i],na.rm = TRUE)/ni) *
(dat[,j] - sum(dat[,j],na.rm = TRUE)/nj),na.rm = TRUE)/(nij-1)
}
}
covar
eigen(covar)
eigen(covar)$values
prcomp(dat)
X = runif(600)
dat = matrix(X, nrow = 100)
prcomp(dat)
PCAmv <- function(dat)
{
dimen <- dim(dat)
m <- dimen[1]
n <- dimen[2]
covar <- matrix(0,nrow = n,ncol = n)
for(i in 1:n)
{
for(j in i:n)
{
ni <- sum(!is.na(dat[,i]))
nj <- sum(!is.na(dat[,j]))
nij <- sum(!is.na(dat[,i] * dat[,j]))
covar[j,i] <- covar[i,j] <- sum(dat[,i]*dat[,j],na.rm = T)/nij -
((sum(dat[,i],na.rm = T)/ni) *
(sum(dat[,j],na.rm = T)/nj))
}
}
eigen(covar)
}
PCAmv(dat)
prcomp(dat)
a = prcomp(dat)
a
a$x
a$sdev
a$rotation
a$center
PCAmv(dat)
a$scale
?prcomp
eigen(covar)
prcomp(covar)
?prcomp
dat
dimen <- dim(dat)
m <- dimen[1]
n <- dimen[2]
covar <- matrix(0,nrow = n,ncol = n)
for(i in 1:n)
{
for(j in i:n)
{
ni <- sum(!is.na(dat[,i]))
nj <- sum(!is.na(dat[,j]))
nij <- sum(!is.na(dat[,i] * dat[,j]))
covar[j,i] <- covar[i,j] <- sum(dat[,i]*dat[,j],na.rm = T)/nij -
((sum(dat[,i],na.rm = T)/ni) *
(sum(dat[,j],na.rm = T)/nj))
}
}
covar
cov(dat)
dimen <- dim(dat)
m <- dimen[1]
n <- dimen[2]
covar <- matrix(0,nrow = n,ncol = n)
for(i in 1:n)
{
for(j in i:n)
{
ni <- sum(!is.na(dat[,i]))
nj <- sum(!is.na(dat[,j]))
nij <- sum(!is.na(dat[,i] * dat[,j]))
covar[j,i] <- covar[i,j] <- sum((dat[,i] - sum(dat[,i],na.rm = TRUE)/ni) *
(dat[,j] - sum(dat[,j],na.rm = TRUE)/nj),na.rm = TRUE)/(nij-1)
#covar[j,i] <- covar[i,j] <- sum(dat[,i]*dat[,j],na.rm = T)/nij -
#              ((sum(dat[,i],na.rm = T)/ni) *
#              (sum(dat[,j],na.rm = T)/nj))
}
}
covar
cov(dat)
X = runif(600)
idx = sample(600,60,replace = FALSE)
X[idx] = NA
dat = matrix(X, nrow = 100)
PCAmv <- function(dat)
{
dimen <- dim(dat)
m <- dimen[1]
n <- dimen[2]
covar <- matrix(0,nrow = n,ncol = n)
for(i in 1:n)
{
for(j in i:n)
{
ni <- sum(!is.na(dat[,i]))
nj <- sum(!is.na(dat[,j]))
nij <- sum(!is.na(dat[,i] * dat[,j]))
covar[j,i] <- covar[i,j] <- mean(dat[,i] * dat[,j],na.rm = T) -
mean(dat[,i], na.rm = T) * mean(dat[,j],na.rm = T)
#sum((dat[,i] - sum(dat[,i],na.rm = TRUE)/ni) *
#                          (dat[,j] - sum(dat[,j],na.rm = TRUE)/nj),na.rm = TRUE)/(nij-1)
#covar[j,i] <- covar[i,j] <- sum(dat[,i]*dat[,j],na.rm = T)/nij -
#              ((sum(dat[,i],na.rm = T)/ni) *
#              (sum(dat[,j],na.rm = T)/nj))
}
}
eigen(covar)
}
PCAmv(dat)
dimen <- dim(dat)
m <- dimen[1]
n <- dimen[2]
covar <- matrix(0,nrow = n,ncol = n)
for(i in 1:n)
{
for(j in i:n)
{
ni <- sum(!is.na(dat[,i]))
nj <- sum(!is.na(dat[,j]))
nij <- sum(!is.na(dat[,i] * dat[,j]))
covar[j,i] <- covar[i,j] <- mean(dat[,i] * dat[,j],na.rm = T) -
mean(dat[,i], na.rm = T) * mean(dat[,j],na.rm = T)
#sum((dat[,i] - sum(dat[,i],na.rm = TRUE)/ni) *
#                          (dat[,j] - sum(dat[,j],na.rm = TRUE)/nj),na.rm = TRUE)/(nij-1)
#covar[j,i] <- covar[i,j] <- sum(dat[,i]*dat[,j],na.rm = T)/nij -
#              ((sum(dat[,i],na.rm = T)/ni) *
#              (sum(dat[,j],na.rm = T)/nj))
}
}
sqrt(eigen(covar)$values)
prcomp(dat)
X = runif(600)
dat = matrix(X, nrow = 100)
dimen <- dim(dat)
m <- dimen[1]
n <- dimen[2]
covar <- matrix(0,nrow = n,ncol = n)
for(i in 1:n)
{
for(j in i:n)
{
ni <- sum(!is.na(dat[,i]))
nj <- sum(!is.na(dat[,j]))
nij <- sum(!is.na(dat[,i] * dat[,j]))
covar[j,i] <- covar[i,j] <- mean(dat[,i] * dat[,j],na.rm = T) -
mean(dat[,i], na.rm = T) * mean(dat[,j],na.rm = T)
#sum((dat[,i] - sum(dat[,i],na.rm = TRUE)/ni) *
#                          (dat[,j] - sum(dat[,j],na.rm = TRUE)/nj),na.rm = TRUE)/(nij-1)
#covar[j,i] <- covar[i,j] <- sum(dat[,i]*dat[,j],na.rm = T)/nij -
#              ((sum(dat[,i],na.rm = T)/ni) *
#              (sum(dat[,j],na.rm = T)/nj))
}
}
sqrt(eigen(covar)$values)
prcomp(dat)
X = runif(6000)
dat = matrix(X, nrow = 1000)
dimen <- dim(dat)
m <- dimen[1]
n <- dimen[2]
covar <- matrix(0,nrow = n,ncol = n)
for(i in 1:n)
{
for(j in i:n)
{
ni <- sum(!is.na(dat[,i]))
nj <- sum(!is.na(dat[,j]))
nij <- sum(!is.na(dat[,i] * dat[,j]))
covar[j,i] <- covar[i,j] <- mean(dat[,i] * dat[,j],na.rm = T) -
mean(dat[,i], na.rm = T) * mean(dat[,j],na.rm = T)
#sum((dat[,i] - sum(dat[,i],na.rm = TRUE)/ni) *
#                          (dat[,j] - sum(dat[,j],na.rm = TRUE)/nj),na.rm = TRUE)/(nij-1)
#covar[j,i] <- covar[i,j] <- sum(dat[,i]*dat[,j],na.rm = T)/nij -
#              ((sum(dat[,i],na.rm = T)/ni) *
#              (sum(dat[,j],na.rm = T)/nj))
}
}
sqrt(eigen(covar)$values)
prcomp(dat)
eigens <- eigen(covar)
PCAmv <- function(dat)
{
dimen <- dim(dat)
m <- dimen[1]
n <- dimen[2]
covar <- matrix(0,nrow = n,ncol = n)
for(i in 1:n)
{
for(j in i:n)
{
ni <- sum(!is.na(dat[,i]))
nj <- sum(!is.na(dat[,j]))
nij <- sum(!is.na(dat[,i] * dat[,j]))
covar[j,i] <- covar[i,j] <- mean(dat[,i] * dat[,j],na.rm = T) -
mean(dat[,i], na.rm = T) * mean(dat[,j],na.rm = T)
#sum((dat[,i] - sum(dat[,i],na.rm = TRUE)/ni) *
#                          (dat[,j] - sum(dat[,j],na.rm = TRUE)/nj),na.rm = TRUE)/(nij-1)
#covar[j,i] <- covar[i,j] <- sum(dat[,i]*dat[,j],na.rm = T)/nij -
#              ((sum(dat[,i],na.rm = T)/ni) *
#              (sum(dat[,j],na.rm = T)/nj))
}
}
eigens <- eigen(covar)
eigenvalues <- eigens$values
eigenvectors <-eigens$vectors
list(StandardDeviation = eigenvalues, Rotation = eigenvectors)
}
PCAmv(dat)
PCAmv <- function(dat)
{
dimen <- dim(dat)
m <- dimen[1]
n <- dimen[2]
covar <- matrix(0,nrow = n,ncol = n)
for(i in 1:n)
{
for(j in i:n)
{
ni <- sum(!is.na(dat[,i]))
nj <- sum(!is.na(dat[,j]))
nij <- sum(!is.na(dat[,i] * dat[,j]))
covar[j,i] <- covar[i,j] <- mean(dat[,i] * dat[,j],na.rm = T) -
mean(dat[,i], na.rm = T) * mean(dat[,j],na.rm = T)
#sum((dat[,i] - sum(dat[,i],na.rm = TRUE)/ni) *
#                          (dat[,j] - sum(dat[,j],na.rm = TRUE)/nj),na.rm = TRUE)/(nij-1)
#covar[j,i] <- covar[i,j] <- sum(dat[,i]*dat[,j],na.rm = T)/nij -
#              ((sum(dat[,i],na.rm = T)/ni) *
#              (sum(dat[,j],na.rm = T)/nj))
}
}
eigens <- eigen(covar)
eigenvalues <- eigens$values
eigenvectors <-eigens$vectors
list(StandardDeviation = eigenvalues, Rotation = eigenvectors)
}
PCAmv(dat)
setwd("~/AvailableCases/AvailableCases/")
install.packages("AvailableCases")
?lmmv
setwd("..")
install.packages("AvailableCases")
install.packages(AvailableCases)
setwd("AvailableCases/")
library(roxygen2)
document()
document()
library("devtools")
devtools::install_github("klutometis/roxygen")
library(roxygen2)
document()
setwd("..")
install("AvailableCases")
?lmmv
AvailableCases
?AvailableCases
??AvailableCases
?PCAmv
?screenplot
source('~/AvailableCases/AvailableCases/R/PCAmv.R', echo=TRUE)
X = runif(6000)
idx = sample(600,60,replace = FALSE)
X[idx] = NA
data = matrix(X, nrow = 1000)
PCAmv(dat)
PCAmv(data)
X = runif(6000)
data = matrix(X, nrow = 1000)
PCAmv(data)
prcomp(data)
aa = prcomp(data)
plot(aa)
use = "variance"
use %in% c("variance","cumvariance","eigenvalue")
PCAmv(data)
ACPCA = PCAmv(data)
library(ggplot2)
eigenvalues <- ACPCA$eigenvalues
variance <- eigenvalues * 100/ sum(eigenvalues)
cumvar <- cumsum(variance)
df <- data.frame(dimension = 1:length(eigenvalues),
eigenvalues = eigenvalues,
variance = variance,
cumvariance = cumvar)
npc = "maximum"
use = "variance"
if(npc == "maximum")
{
npc = length(eigenvalues)
p <- ggplot(df)
}
else
{
df <- df[1:npc,]
p <- ggplot(df)
}
if(npc == "maximum")
{
npc = length(eigenvalues)
p <- ggplot(df)
}
else
{
df <- df[1:npc,]
p <- ggplot(df)
}
p
use = tolower(use)
method = c("variance","cumvariance","eigenvalue")
if(use %in% method)
{p + geom_bar(aes(x = dimension, y = use), stat = "identity",
fill = "lightblue") +
geom_point(aes(x = dimension, y = variance), stat = "identity") +
geom_line(aes(x = dimension, y = variance), stat = "identity",colour = 'red') +
ggtitle(paste("Screen plot of fisrt ",npc ," Eigenvalues ", sep = "" ))
}
if(use %in% method)
{p + geom_bar(aes(x = dimension, y = use), stat = "identity",
fill = "lightblue") +
geom_point(aes(x = dimension, y = use), stat = "identity") +
geom_line(aes(x = dimension, y = use), stat = "identity",colour = 'red') +
ggtitle(paste("Screen plot of fisrt ",npc ," Eigenvalues ", sep = "" ))
}
if(use %in% method)
{p + geom_bar(aes(x = dimension, y = as.name(use)), stat = "identity",
fill = "lightblue") +
geom_point(aes(x = dimension, y = as.name(use)), stat = "identity") +
geom_line(aes(x = dimension, y = as.name(use)), stat = "identity",colour = 'red') +
ggtitle(paste("Screen plot of fisrt ",npc ," Eigenvalues ", sep = "" ))
}
as.name(use)
plot.ACPCA <- function(ACPCA, npc = "maximum",use = "variance")
{
eigenvalues <- ACPCA$eigenvalues
variance <- eigenvalues * 100/ sum(eigenvalues)
cumvar <- cumsum(variance)
df <- data.frame(dimension = 1:length(eigenvalues),
eigenvalues = eigenvalues,
variance = variance,
cumvariance = cumvar)
if(npc == "maximum")
{
npc = length(eigenvalues)
p <- ggplot(df)
}
else
{
df <- df[1:npc,]
p <- ggplot(df)
}
# screen plot of eigen value
use = tolower(use)
method = c("variance","cumvariance","eigenvalue")
if(use %in% method)
{p + geom_bar(aes(x = dimension, y = as.name(use)), stat = "identity",
fill = "lightblue") +
geom_point(aes(x = dimension, y = as.name(use)), stat = "identity") +
geom_line(aes(x = dimension, y = as.name(use)), stat = "identity",colour = 'red') +
ggtitle(paste("Screen plot of fisrt ",npc ," Eigenvalues ", sep = "" ))
}
}
plot(ACPCA)
plot(ACPCA,use = "cumvariance")
p + geom_bar(aes(x = dimension), ase_string(y = use), stat = "identity",
fill = "lightblue")
p + geom_bar(aes(x = dimension), aes_string(y = use), stat = "identity",
fill = "lightblue")
p + geom_bar(aes_string(x = "dimension",y = use), stat = "identity",
fill = "lightblue")
if(use %in% method)
{p + geom_bar(aes_string(x = "dimension",y = use), stat = "identity",
fill = "lightblue") +
geom_point(aes_string(x = "dimension",y = use), stat = "identity") +
geom_line(aes_string(x = "dimension",y = use), stat = "identity",colour = 'red') +
ggtitle(paste("Screen plot of fisrt ",npc ," Eigenvalues ", sep = "" ))
}
plot.ACPCA <- function(ACPCA, npc = "maximum",use = "variance")
{
eigenvalues <- ACPCA$eigenvalues
variance <- eigenvalues * 100/ sum(eigenvalues)
cumvar <- cumsum(variance)
df <- data.frame(dimension = 1:length(eigenvalues),
eigenvalues = eigenvalues,
variance = variance,
cumvariance = cumvar)
if(npc == "maximum")
{
npc = length(eigenvalues)
p <- ggplot(df)
}
else
{
df <- df[1:npc,]
p <- ggplot(df)
}
# screen plot of eigen value
use = tolower(use)
method = c("variance","cumvariance","eigenvalue")
if(use %in% method)
{p + geom_bar(aes_string(x = "dimension",y = use), stat = "identity",
fill = "lightblue") +
geom_point(aes_string(x = "dimension",y = use), stat = "identity") +
geom_line(aes_string(x = "dimension",y = use), stat = "identity",colour = 'red') +
ggtitle(paste("Screen plot of fisrt ",npc ," Eigenvalues ", sep = "" ))
}
else
{
stop(paste("Do not know how to deal with",use,sep = " "))
}
}
plot(ACPCA,use = "qqq")
plot(ACPCA,use = "cumvariance")
plot(ACPCA,use = "eigenvalue")
source('~/.active-rstudio-document', echo=TRUE)
plot(ACPCA,use = "eigenvalues")
